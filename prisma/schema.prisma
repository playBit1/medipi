// This is the Prisma schema file for MediPi automated medication dispenser
// It defines all database models and their relationships

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for admin authentication
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String   // Will store hashed password
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Patient model
model Patient {
  id          String      @id @default(uuid())
  name        String
  dateOfBirth DateTime
  roomNumber  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  dispenser   Dispenser?  // One patient can be assigned to one dispenser
  schedules   Schedule[]  // One patient can have many schedules
}

// Medication model
model Medication {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String?
  dosageUnit     String           // e.g., "pill", "ml", "mg"
  stockLevel     Int              @default(0)
  stockThreshold Int              @default(10) // Alert threshold
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  chambers       ChamberContent[] // One medication can be in many chambers
}

// Dispenser model
model Dispenser {
  id              String           @id @default(uuid())
  serialNumber    String           @unique
  status          DispenserStatus  @default(OFFLINE)
  lastSeen        DateTime?
  patientId       String?          @unique // One dispenser has one patient
  patient         Patient?         @relation(fields: [patientId], references: [id])
  chambers        Chamber[]        // One dispenser has many chambers
  schedules       Schedule[]       // One dispenser has many schedules
  dispenserLogs   DispenserLog[]   // One dispenser has many logs
  rfids           DispenserRfid[]  // One dispenser has many RFIDs
  lastSyncedAt    DateTime?        // When schedules were last synced
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Chamber model - represents physical chambers in a dispenser
model Chamber {
  id             String           @id @default(uuid())
  dispenserId    String
  dispenser      Dispenser        @relation(fields: [dispenserId], references: [id])
  chamberNumber  Int              // Physical number (1-6)
  chamberContent ChamberContent[] // One chamber can have different medications at different times
  
  @@unique([dispenserId, chamberNumber]) // Each chamber number is unique within a dispenser
}

// ChamberContent model - links chambers to medications for specific schedules
model ChamberContent {
  id            String     @id @default(uuid())
  chamberId     String
  chamber       Chamber    @relation(fields: [chamberId], references: [id])
  medicationId  String
  medication    Medication @relation(fields: [medicationId], references: [id])
  scheduleId    String
  schedule      Schedule   @relation(fields: [scheduleId], references: [id])
  dosageAmount  Int        // How many units to dispense
  currentAmount Int        // Current amount in chamber
  
  @@unique([chamberId, scheduleId]) // One chamber can only have one medication per schedule
}

// Schedule model
model Schedule {
  id              String           @id @default(uuid())
  patientId       String
  patient         Patient          @relation(fields: [patientId], references: [id])
  dispenserId     String
  dispenser       Dispenser        @relation(fields: [dispenserId], references: [id])
  time            Int              // Hour of day (0-23)
  startDate       DateTime
  endDate         DateTime?
  isActive        Boolean          @default(true)
  chambers        ChamberContent[] // Which chambers are used in this schedule
  dispenserLogs   DispenserLog[]   // Logs of this schedule's dispensing events
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([dispenserId, time]) // Cannot have two schedules at the same hour for one dispenser
}

// DispenserLog model - logs of dispensing events
model DispenserLog {
  id          String         @id @default(uuid())
  dispenserId String
  dispenser   Dispenser      @relation(fields: [dispenserId], references: [id])
  scheduleId  String
  schedule    Schedule       @relation(fields: [scheduleId], references: [id])
  timestamp   DateTime
  status      DispensingStatus
  medications String         // JSON string of dispensed medications and amounts
  synced      Boolean        @default(false) // Whether log has been synced to central hub
  createdAt   DateTime       @default(now())
}

// DispenserRfid model - RFIDs associated with dispensers
model DispenserRfid {
  id          String       @id @default(uuid())
  dispenserId String
  dispenser   Dispenser    @relation(fields: [dispenserId], references: [id])
  rfidTag     String       @unique
  type        RfidType
  createdAt   DateTime     @default(now())
}

// Enum for dispenser status
enum DispenserStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
  ERROR
  OFFLINE_AUTONOMOUS
}

// Enum for dispensing status
enum DispensingStatus {
  COMPLETED
  MISSED
  LATE
  ERROR
}

// Enum for RFID types
enum RfidType {
  PATIENT
  ADMIN
}